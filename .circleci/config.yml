version: 2.1


orbs:
  slack: circleci/slack@4.4.2
  
commands:          
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete the S3 buckets. 
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force                 
            
            # Delete the stacks
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run 
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: udapeople-project3-migration-<<parameters.workflow_id>>" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.<done>
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
         
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end audit
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: back-end audit
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-project3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-project3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text >> inventory.txt
            cat inventory.txt
      - run:
          name: Save back-end url link
          command: |
            BackendURL=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text)
            echo "Backend URL": $BackendURL
            curl -H "Content-Type: text/plain" -H "token: udapeople-project3-BackendURL-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$BackendURL" https://api.memstash.io/values/BackendURL
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar gzip
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["29:69:fc:dc:81:74:5b:9e:5f:a0:a2:63:cf:8b:f2:9c"]      # Add ssh keys with fingerprint
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo apt-get update
            sudo apt-get install awscli
            npm install
            npm run migrations >> migrations_file.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations_file.txt
            then
              curl -H "Content-Type: text/plain" -H "token: udapeople-project3-migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo $(curl -H "Content-Type: text/plain" -H "token: udapeople-project3-migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            fi
      # Here's where you will add some code to rollback on failure                
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  deploy-frontend:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip sudo
            # Install Nodejs
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_URL=$(curl -H "token: udapeople-project3-BackendURL-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BackendURL)
            export API_URL="http://${BACKEND_URL}:3030"
            echo "${API_URL}" >> .circleci/Backend_URL.txt
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat .circleci/Backend_URL.txt)
            echo "${API_URL}" > frontend/.env
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
         
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["29:69:fc:dc:81:74:5b:9e:5f:a0:a2:63:cf:8b:f2:9c"]      # Add ssh keys with fingerprint
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python3
            sudo apt-get install ansible
            sudo apt-get install awscli            
      - run:
          name: Deploy backend
          command: |
            echo ENVIROMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            tar -C backend -czvf backend.tar.gz .
            
            cat /tmp/.circleci/ansible/inventory.txt
                        
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i  /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url
          command: |          
              curl -H "token: udapeople-project3-BackendURL-${CIRCLE_WORKFLOW_ID}" \
                --request GET https://api.memstash.io/values/BackendURL \
                > .circleci/Backend_URL.txt
      - run:
          name: Backend smoke test.
          command: |
            url=$(cat .circleci/Backend_URL.txt)
            url="http://${url}:3030/api/status"
            echo $url
            curl $url
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo " URL " $URL
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Successful front-end Smoke-test" 
            else
              echo "Unsuccessful front-end Smoke-test"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
  cloudfront-update:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --tags project=udapeople-project3 \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"       
              
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}          
          
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # get old WorkFlowId            
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              
            echo $OldWorkflowID
            # get all stacks
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --no-paginate --output text))
              
            echo ${STACKS[@]:19}
            if [[ "${STACKS[@]:19}" =~ "${OldWorkflowID}" ]]
            then
              echo "test"
#              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
#              aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
#              aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - cleanup
#          requires: [cloudfront-update]
